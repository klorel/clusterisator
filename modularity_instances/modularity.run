
reset;

param N integer > 0;

set E within {(i,j) in 1..N cross 1..N : i<j};
set V1 := {(i,j) in 1..N cross 1..N };
set V2 := {(i,j) in V1 : i<j};
set V3 := {(i,j,l) in V2 cross 1..N : j<l};

param a{(i,j) in V1} := 
	if(i==j) then 0.0 else if ((i,j) in E or (j,i) in E) then 1.0 else 0.0;

param k{ i in 1..N } := card({(i,j) in E})+card({ (j,i) in E});
param m := 1.0*card(E);
param inv_m := 1.0/m;
param inv_2m := inv_m*0.5;
param w{(i,j) in V1 } := (a[i,j]-k[i]*k[j]*inv_2m)*inv_m;

param C :=  sum{ i in 1..N }(k[i]*inv_2m)^2;


# data karate.dat;
# data football.dat;
data dolphins.dat;
# data lesmis.dat;
# data toy.dat;



# display E;
# display k;
display m;
# display w;
# display V2;
# display V3;

var x{V2} binary;

# fix{(i,j) in V2} x[i,j] := 0;
maximize modularity: -C+sum{(i,j) in V2} w[i,j]*x[i,j];

subject to ctr1 { (r,s,t) in V3} : +x[r,s]+x[s,t]-x[r,t]<=1;
subject to ctr2 { (r,s,t) in V3} : +x[r,s]-x[s,t]+x[r,t]<=1;
subject to ctr3 { (r,s,t) in V3} : -x[r,s]+x[s,t]+x[r,t]<=1;

option solver xpress;
option xpress_options "outlev=1";
solve;

# display x;
# param c{i in 1..N, j in 1..N} := if(i==j) then 1
# display 1/m;
# display (sum{i in 1..N, j in 1..N}x[i,j]*( a[i,j]-k[i]*k[j]/(2.0*m)))/(2.0*m);

# param delta{(i,j) in V1};
# let{(i,j) in V1} delta[i,j] :=	if(i==j) then 1 else if (i<j) then x[i,j] else x[j,i];

display modularity;
# display C;
# display (inv_2m)*sum{(i,j) in V1}(a[i,j]- k[i]*k[j]*inv_2m)*delta[i,j];
# display (inv_m)*sum{(i,j) in V2}(a[i,j]- k[i]*k[j]*inv_2m)*delta[i,j] - sum{i in 1..N}(k[i]*inv_2m)^2;
# display (inv_m)*sum{(i,j) in V2}(a[i,j]- k[i]*k[j]*inv_2m)*delta[i,j] - C;
# display -C+sum{(i,j) in V2} w[i,j]*x[i,j];