
reset;
# param ZERO = 1e-4;
# param nR integer > 0;
# param nB integer > 0;


# set V1 := {(i,j) in  1..nR cross 1..nB };

# set V2 := V1 cross V1;
# set V3 := {(i,j,k) in  V1 cross 1..nB };

# set E within {(i,j) in V1 };

# param a{(i,j) in V1} :=  if ((i,j) in E ) then 1.0 else 0.0;

# param kR{ i in 1..nR } := card({(i,j) in E});
# param kB{ j in 1..nB } := card({(i,j) in E});

# param m := 1.0*card(E);
# param inv_m := 1.0/m;

# param w{(i,j) in V1 } := (a[i,j]-kR[i]*kB[j]*inv_m)*inv_m;

model modularity.mod;
# data divorces2.dat;
data social_work.dat;
# data women.dat;



# display E;
# display k;
# display E;
# display w;
# display V2;
# display V3;
set R := 1..nR;
set B := 1..nB;
set N := 1..nR+nB;

set C := 1..nR+nB;
set T := R cross B cross C;

var yR{R,C} binary;
var yB{B,C} binary;

var zR{i in R,c in C}  = 2*yR[i,c]-1;
var zB{j in B,c in C}  = 2*yB[j,c]-1;

var t{T} >= -1, <= 1;

param activate_default := 0;
param activate_ll{(i,j,c) in T } default activate_default;
param activate_uu{(i,j,c) in T } default activate_default;
param activate_ul{(i,j,c) in T } default activate_default;
param activate_lu{(i,j,c) in T } default activate_default;

# maximize modularity: 0.25*sum{ c in C }sum{(i,j) in V1} z[i,c]*w[i,j]*z[nR+j,c];
maximize modularity: 0.25*sum{ c in C }sum{(i,j) in V1} w[i,j]*t[i,j,c];
# maximize modularity:sum{i in R,c in C}zR[i,c]+sum{i in B,c in C}zB[i,c];
s.t. ctrR{i in R}: sum{c in C} zR[i,c] = -(nR+nB-2);
s.t. ctrB{j in B}: sum{c in C} zB[j,c] = -(nR+nB-2);

subject to  ll{(i,j,c) in T }: activate_ll[i,j,c]*(t[i,j,c] +zR[i,c]+zB[j,c] + 1 )>= 0;
subject to  uu{(i,j,c) in T }: activate_uu[i,j,c]*(t[i,j,c] -zR[i,c]-zB[j,c] + 1 )>= 0;
subject to  ul{(i,j,c) in T }: activate_ul[i,j,c]*(t[i,j,c] -zR[i,c]+zB[j,c] - 1 )<= 0;
subject to  lu{(i,j,c) in T }: activate_lu[i,j,c]*(t[i,j,c] +zR[i,c]-zB[j,c] - 1 )<= 0;

option solver xpress;
option xpress_options "outlev=1 symmetry=0";

param violated_ll;
param violated_uu;
param violated_ul;
param violated_lu;

repeat 
{
	solve modularity;
	let violated_ll := card({ (i,j,c) in T : t[i,j,c] +zR[i,c]+zB[j,c] + 1<-ZERO});
	let violated_uu := card({ (i,j,c) in T : t[i,j,c] -zR[i,c]-zB[j,c] + 1<-ZERO});
	let violated_ul := card({ (i,j,c) in T : t[i,j,c] -zR[i,c]+zB[j,c] - 1>+ZERO});
	let violated_lu := card({ (i,j,c) in T : t[i,j,c] +zR[i,c]-zB[j,c] - 1>+ZERO});
	
	display violated_ll, violated_uu, violated_ul, violated_lu;
	
	let{ (i,j,c) in T} activate_ll[i,j,c] := if(t[i,j,c] +zR[i,c]+zB[j,c] + 1<-ZERO) then 1 else activate_ll[i,j,c] ;
	let{ (i,j,c) in T} activate_uu[i,j,c] := if(t[i,j,c] -zR[i,c]-zB[j,c] + 1<-ZERO) then 1 else activate_uu[i,j,c] ;
	let{ (i,j,c) in T} activate_ul[i,j,c] := if(t[i,j,c] -zR[i,c]+zB[j,c] - 1>+ZERO) then 1 else activate_ul[i,j,c] ;
	let{ (i,j,c) in T} activate_lu[i,j,c] := if(t[i,j,c] +zR[i,c]-zB[j,c] - 1>+ZERO) then 1 else activate_lu[i,j,c] ;
	
	
	display 
		sum{(i,j,c) in T} activate_ll[i,j,c], 
		sum{(i,j,c) in T} activate_uu[i,j,c], 
		sum{(i,j,c) in T} activate_ul[i,j,c], 
		sum{(i,j,c) in T} activate_lu[i,j,c];
}until violated_ll+violated_uu+violated_ul+violated_lu == 0;


display modularity;