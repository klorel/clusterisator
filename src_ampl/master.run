
problem master;
#expand;
let M_TIME := time();
if DISPLAY_MASTER_SOLVE == 1 then{
#	option solver_msg 1;
#	option cplex_options 'outlev=1 lpdisplay=2';
	solve MASTER_OBJ;
}else{
	close master.log;
	solve MASTER_OBJ > master.log;
}
#printf "master solve took %20d\n", time()-M_TIME;
if solve_result != 'solved' then exit;

let{v in V} PI[v] := set_partitionning[v].dual;
let{v in V} DUAL_FOR_RC[v] := PI[v] + (if USE_STAB == 1 then fake_constraint[USE_STAB].dual else 0);


if USE_STAB == 1 then{
	let C_DOT_X := c_dot_x;
	let{v in V} FEAS_V[v] := 1-sum{(v, col, val) in SET_PARTITIONNING_V_COL_VAL}val*x[col];
	
	let PI_DOT_B := sum{v in V}PI[v];
	
	#let PHI_B_PI := PI_DOT_B + FAKE_RHS * fake_constraint[USE_STAB].dual;	
	#display C_DOT_X, PI_DOT_B, max{col in COLS}(COST[col] - sum{(v, col, val) in SET_PARTITIONNING_V_COL_VAL}val*PI[v]);
	#display PHI_B_PI;
	#display fake_constraint[USE_STAB].dual;
	let PHI_B_PI := PI_DOT_B + max{col in COLS}(COST[col] - sum{(v, col, val) in SET_PARTITIONNING_V_COL_VAL}val*PI[v]);
	#display max{v in V}(PI[v]-CENTER[v]);
	#display max{v in V}(PI[v]);
	#display Z_COST, Z_WIDTH;
};

let CG_BOUND := sum{col in COLS}COST[col]*x[col];

let POOL_COST := {};
let POOL_SOLUTION  := {};
let STEP := "UNKNOWN";



